#!/usr/bin/env python2
#-*- coding: utf-8 -*-

import datetime
import errno
import os
import fcntl
import paramiko
import sys
import subprocess
import signal
import time
import json

from paramiko import SSHException
from optparse import OptionParser

from vmcheck.daemon import Daemon
from vmcheck.utils import exec_cmd, DINFO, DWARN, DERROR, ping_ok
from vmcheck.managerloop import worker
#from managervm_utils import VM_SYSTEMDISK
#from managervm_utils import DINFO, DWARN, DERROR, exec_cmd, exec_cmd_remote, VM_CHANNEL, VM_SYSTEMDISK

class Admin(Daemon):
    def run(self):
        worker()

if __name__ == "__main__":
    usage = "usage: %prog [options] arg1 arg2"
    parser = OptionParser(usage=usage)

    parser.add_option('', "--start",
        action="store_true", dest="start", default=None,
        help="you can start it as a daemon with --daemon")
    parser.add_option('', "--stop",
        action="store_true", dest="stop", default=None,
        help="")
    parser.add_option('', "--restart",
        action="store_true", dest="restart", default=None,
        help="")
    parser.add_option('', "--stat",
        action="store_true", dest="stat", default=None,
        help="")
    parser.add_option('-d', "--daemon",
        action="store_true", dest="daemon", default=None,
        help="")

    if (len(sys.argv) <= 1):
        parser.print_help()
        exit(1)

    (options, args) = parser.parse_args()

    pidfile = "/var/run/vmcheck_admin.pid"
    stdout = "/var/log/vmcheck_admin.log"
    stderr = stdout
    admin = Admin(pidfile, stdout=stdout, stderr=stderr, name="vmcheck_admin")

    if options.start:
        if options.daemon:
            print 'start as daemon'
            admin.start()
        else:
            worker()
    elif options.stop:
        admin.stop()
    elif options.stat:
        if admin.stat():
            cmd = "cat %s" % admin.pidfile
            stdout, stderr = exec_cmd(cmd)
            pid = stdout.strip()
            print 'running pid: %s' % pid
        else:
            print 'stopped'
    elif options.restart:
        admin.restart()
    else:
        DERROR("not support")
        exit(1)
